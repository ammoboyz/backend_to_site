from datetime import datetime

from aiogram import F, Router, Bot
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from sqlalchemy import select, update
from sqlalchemy.ext.asyncio import AsyncSession

from app_bot.database.models import User
from app_bot.filters import IsAdmin
from app_bot.utils import func


async def add_vip(message: Message, session: AsyncSession):
    split_text = message.text.split()

    if len(split_text) != 3:
        return await message.answer(
            text="<b>‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã!</b>\n\n<code>/add_vip ID days</code>"
        )

    if not split_text[2].isdigit() or not split_text[1].isdigit():
        return await message.answer(
            text="<b>‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∏–ª–∏ days!</b>"
        )

    user_instance = await session.scalar(
        select(User
    )
        .where(User
    .user_id == int(split_text[1]))
    )

    if user_instance is None:
        return await message.answer(
            text="<b>‚ö†Ô∏è –î–∞–Ω–Ω—ã–π ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!</b>"
        )

    user_instance.add_vip(int(split_text[2]))

    await message.answer(
        text=f"<b>‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é c ID {user_instance.user_id} –≤—ã–¥–∞–Ω VIP –Ω–∞ {split_text[2]} –¥–Ω–µ–π.</b>"
    )


async def check_user(message: Message, bot: Bot, session: AsyncSession):
    split_text = message.text.split()

    if len(split_text) != 2:
        return await message.answer(
            text="<b>‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã!</b>\n\n<code>/check_user ID</code>"
        )

    if not split_text[1].isdigit():
        return await message.answer(
            text="<b>‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID</b>"
        )

    user_instance = await session.scalar(
        select(User
    )
        .where(User
    .user_id == int(split_text[1]))
    )

    if user_instance is None:
        return await message.answer(
            text="<b>‚ö†Ô∏è –î–∞–Ω–Ω—ã–π ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!</b>"
        )

    user_info = await bot.get_chat_member(
        chat_id=user_instance.user_id,
        user_id=user_instance.user_id
    )

    await message.answer(
        text=f'''
<b>üë®‚Äçü¶± –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> @{user_info.user.username}
<b>‚úçÔ∏è –ü–æ–ª–Ω–æ–µ –∏–º—è:</b> <code>{user_info.user.first_name}</code>
<b>ü§¥ –ü—Ä–µ–º–∏—É–º:</b> <code>{"–¥–∞" if user_info.user.is_premium else "–Ω–µ—Ç"}</code>

<b>üÜî ID:</b> <code>{user_instance.user_id}</code>
<b>üóì –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: </b> <code>{user_instance.reg_date}</code>
<b>‚ò†Ô∏è –ú—ë—Ä—Ç–≤:</b> <code>{"–¥–∞" if user_instance.dead else "–Ω–µ—Ç"}</code>
<b>‚õîÔ∏è –ó–∞–±–∞–Ω–µ–Ω:</b> <code>{"–¥–∞" if user_instance.banned else "–Ω–µ—Ç"}</code>

<b>üëë VIP:</b> <code>{func.days_until(user_instance.vip_time) if user_instance.vip_time else "–Ω–µ—Ç"}</code>
'''
    )


async def delete_vip(message: Message, session: AsyncSession):
    split_text = message.text.split()

    if len(split_text) != 2:
        return await message.answer(
            text="<b>‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã!</b>\n\n<code>/delete_vip ID</code>"
        )

    if not split_text[1].isdigit():
        return await message.answer(
            text="<b>‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID</b>"
        )

    user_instance = await session.scalar(
        select(User
    )
        .where(User
    .user_id == int(split_text[1]))
    )

    if user_instance is None:
        return await message.answer(
            text="<b>‚ö†Ô∏è –î–∞–Ω–Ω—ã–π ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!</b>"
        )

    user_instance.vip_time = datetime(1970, 1, 1)

    await message.answer(
        text=f"<b>‚úÖ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è c ID {user_instance.user_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω VIP!</b>"
    )


async def ban(call: CallbackQuery, session: AsyncSession):
    user_id = int(call.data.split(":")[1])

    await session.execute(
        update(User
    )
        .where(User
    .user_id == user_id)
        .values(banned=True)
    )

    await call.message.delete()

    await call.message.answer(
        text=f"<b>‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å c ID <code>{user_id}</code> –∑–∞–±–∞–Ω–µ–Ω</b>"
    )


async def ban_command(message: Message, session: AsyncSession):
    split_text = message.text.split()

    if len(split_text) != 2:
        return await message.answer(
            text="<b>‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã!</b>\n\n<code>/ban ID</code>"
        )

    user_id = int(split_text[1])

    await session.execute(
        update(User
    )
        .where(User
    .user_id == user_id)
        .values(banned=True)
    )

    await message.answer(
        text=f"<b>‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å c ID <code>{user_id}</code> –∑–∞–±–∞–Ω–µ–Ω</b>"
    )


async def unban_command(message: Message, session: AsyncSession):
    split_text = message.text.split()

    if len(split_text) != 2:
        return await message.answer(
            text="<b>‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã!</b>\n\n<code>/unban ID</code>"
        )

    user_id = int(split_text[1])

    await session.execute(
        update(User
    )
        .where(User
    .user_id == user_id)
        .values(banned=False)
    )

    await message.answer(
        text=f"<b>‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å c ID <code>{user_id}</code> —Ä–∞–∑–±–∞–Ω–µ–Ω</b>"
    )


def register(router: Router):
    router.message.register(add_vip, Command("add_vip"), IsAdmin())
    router.message.register(check_user, Command("check_user"), IsAdmin())
    router.message.register(delete_vip, Command("delete_vip"), IsAdmin())
    router.callback_query.register(ban, F.data.startswith("ban:"), IsAdmin())
    router.message.register(ban_command, Command("ban"), IsAdmin())
    router.message.register(unban_command, Command("unban"), IsAdmin())